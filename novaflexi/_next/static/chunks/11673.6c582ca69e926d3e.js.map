{"version":3,"file":"static/chunks/11673.6c582ca69e926d3e.js","mappings":"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","sources":["webpack://_N_E/../../node_modules/date-fns/esm/_lib/isSameUTCWeek/index.js","webpack://_N_E/../../node_modules/date-fns/esm/locale/be-tarask/_lib/formatDistance/index.js","webpack://_N_E/../../node_modules/date-fns/esm/locale/be-tarask/_lib/formatLong/index.js","webpack://_N_E/../../node_modules/date-fns/esm/locale/be-tarask/_lib/formatRelative/index.js","webpack://_N_E/../../node_modules/date-fns/esm/locale/be-tarask/_lib/localize/index.js","webpack://_N_E/../../node_modules/date-fns/esm/locale/be-tarask/_lib/match/index.js","webpack://_N_E/../../node_modules/date-fns/esm/locale/be-tarask/index.js","webpack://_N_E/<anon>"],"sourcesContent":["import requiredArgs from \"../requiredArgs/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nexport default function isSameUTCWeek(dirtyDateLeft, dirtyDateRight, options) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfWeek = startOfUTCWeek(dirtyDateLeft, options);\n  var dateRightStartOfWeek = startOfUTCWeek(dirtyDateRight, options);\n  return dateLeftStartOfWeek.getTime() === dateRightStartOfWeek.getTime();\n}","function declension(scheme, count) {\n  // scheme for count=1 exists\n  if (scheme.one !== undefined && count === 1) {\n    return scheme.one;\n  }\n  var rem10 = count % 10;\n  var rem100 = count % 100;\n\n  // 1, 21, 31, ...\n  if (rem10 === 1 && rem100 !== 11) {\n    return scheme.singularNominative.replace('{{count}}', String(count));\n\n    // 2, 3, 4, 22, 23, 24, 32 ...\n  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {\n    return scheme.singularGenitive.replace('{{count}}', String(count));\n\n    // 5, 6, 7, 8, 9, 10, 11, ...\n  } else {\n    return scheme.pluralGenitive.replace('{{count}}', String(count));\n  }\n}\nfunction buildLocalizeTokenFn(scheme) {\n  return function (count, options) {\n    if (options && options.addSuffix) {\n      if (options.comparison && options.comparison > 0) {\n        if (scheme.future) {\n          return declension(scheme.future, count);\n        } else {\n          return 'праз ' + declension(scheme.regular, count);\n        }\n      } else {\n        if (scheme.past) {\n          return declension(scheme.past, count);\n        } else {\n          return declension(scheme.regular, count) + ' таму';\n        }\n      }\n    } else {\n      return declension(scheme.regular, count);\n    }\n  };\n}\nvar halfAMinute = function halfAMinute(_, options) {\n  if (options && options.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return 'праз паўхвіліны';\n    } else {\n      return 'паўхвіліны таму';\n    }\n  }\n  return 'паўхвіліны';\n};\nvar formatDistanceLocale = {\n  lessThanXSeconds: buildLocalizeTokenFn({\n    regular: {\n      one: 'менш за секунду',\n      singularNominative: 'менш за {{count}} секунду',\n      singularGenitive: 'менш за {{count}} секунды',\n      pluralGenitive: 'менш за {{count}} секунд'\n    },\n    future: {\n      one: 'менш, чым праз секунду',\n      singularNominative: 'менш, чым праз {{count}} секунду',\n      singularGenitive: 'менш, чым праз {{count}} секунды',\n      pluralGenitive: 'менш, чым праз {{count}} секунд'\n    }\n  }),\n  xSeconds: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: '{{count}} секунда',\n      singularGenitive: '{{count}} секунды',\n      pluralGenitive: '{{count}} секунд'\n    },\n    past: {\n      singularNominative: '{{count}} секунду таму',\n      singularGenitive: '{{count}} секунды таму',\n      pluralGenitive: '{{count}} секунд таму'\n    },\n    future: {\n      singularNominative: 'праз {{count}} секунду',\n      singularGenitive: 'праз {{count}} секунды',\n      pluralGenitive: 'праз {{count}} секунд'\n    }\n  }),\n  halfAMinute: halfAMinute,\n  lessThanXMinutes: buildLocalizeTokenFn({\n    regular: {\n      one: 'менш за хвіліну',\n      singularNominative: 'менш за {{count}} хвіліну',\n      singularGenitive: 'менш за {{count}} хвіліны',\n      pluralGenitive: 'менш за {{count}} хвілін'\n    },\n    future: {\n      one: 'менш, чым праз хвіліну',\n      singularNominative: 'менш, чым праз {{count}} хвіліну',\n      singularGenitive: 'менш, чым праз {{count}} хвіліны',\n      pluralGenitive: 'менш, чым праз {{count}} хвілін'\n    }\n  }),\n  xMinutes: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: '{{count}} хвіліна',\n      singularGenitive: '{{count}} хвіліны',\n      pluralGenitive: '{{count}} хвілін'\n    },\n    past: {\n      singularNominative: '{{count}} хвіліну таму',\n      singularGenitive: '{{count}} хвіліны таму',\n      pluralGenitive: '{{count}} хвілін таму'\n    },\n    future: {\n      singularNominative: 'праз {{count}} хвіліну',\n      singularGenitive: 'праз {{count}} хвіліны',\n      pluralGenitive: 'праз {{count}} хвілін'\n    }\n  }),\n  aboutXHours: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: 'каля {{count}} гадзіны',\n      singularGenitive: 'каля {{count}} гадзін',\n      pluralGenitive: 'каля {{count}} гадзін'\n    },\n    future: {\n      singularNominative: 'прыблізна праз {{count}} гадзіну',\n      singularGenitive: 'прыблізна праз {{count}} гадзіны',\n      pluralGenitive: 'прыблізна праз {{count}} гадзін'\n    }\n  }),\n  xHours: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: '{{count}} гадзіна',\n      singularGenitive: '{{count}} гадзіны',\n      pluralGenitive: '{{count}} гадзін'\n    },\n    past: {\n      singularNominative: '{{count}} гадзіну таму',\n      singularGenitive: '{{count}} гадзіны таму',\n      pluralGenitive: '{{count}} гадзін таму'\n    },\n    future: {\n      singularNominative: 'праз {{count}} гадзіну',\n      singularGenitive: 'праз {{count}} гадзіны',\n      pluralGenitive: 'праз {{count}} гадзін'\n    }\n  }),\n  xDays: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: '{{count}} дзень',\n      singularGenitive: '{{count}} дні',\n      pluralGenitive: '{{count}} дзён'\n    }\n  }),\n  aboutXWeeks: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: 'каля {{count}} месяца',\n      // TODO\n      singularGenitive: 'каля {{count}} месяцаў',\n      // TODO\n      pluralGenitive: 'каля {{count}} месяцаў' // TODO\n    },\n\n    future: {\n      singularNominative: 'прыблізна праз {{count}} месяц',\n      // TODO\n      singularGenitive: 'прыблізна праз {{count}} месяцы',\n      // TODO\n      pluralGenitive: 'прыблізна праз {{count}} месяцаў' // TODO\n    }\n  }),\n\n  xWeeks: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: '{{count}} месяц',\n      singularGenitive: '{{count}} месяцы',\n      pluralGenitive: '{{count}} месяцаў'\n    }\n  }),\n  aboutXMonths: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: 'каля {{count}} месяца',\n      singularGenitive: 'каля {{count}} месяцаў',\n      pluralGenitive: 'каля {{count}} месяцаў'\n    },\n    future: {\n      singularNominative: 'прыблізна праз {{count}} месяц',\n      singularGenitive: 'прыблізна праз {{count}} месяцы',\n      pluralGenitive: 'прыблізна праз {{count}} месяцаў'\n    }\n  }),\n  xMonths: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: '{{count}} месяц',\n      singularGenitive: '{{count}} месяцы',\n      pluralGenitive: '{{count}} месяцаў'\n    }\n  }),\n  aboutXYears: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: 'каля {{count}} года',\n      singularGenitive: 'каля {{count}} гадоў',\n      pluralGenitive: 'каля {{count}} гадоў'\n    },\n    future: {\n      singularNominative: 'прыблізна праз {{count}} год',\n      singularGenitive: 'прыблізна праз {{count}} гады',\n      pluralGenitive: 'прыблізна праз {{count}} гадоў'\n    }\n  }),\n  xYears: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: '{{count}} год',\n      singularGenitive: '{{count}} гады',\n      pluralGenitive: '{{count}} гадоў'\n    }\n  }),\n  overXYears: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: 'больш за {{count}} год',\n      singularGenitive: 'больш за {{count}} гады',\n      pluralGenitive: 'больш за {{count}} гадоў'\n    },\n    future: {\n      singularNominative: 'больш, чым праз {{count}} год',\n      singularGenitive: 'больш, чым праз {{count}} гады',\n      pluralGenitive: 'больш, чым праз {{count}} гадоў'\n    }\n  }),\n  almostXYears: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: 'амаль {{count}} год',\n      singularGenitive: 'амаль {{count}} гады',\n      pluralGenitive: 'амаль {{count}} гадоў'\n    },\n    future: {\n      singularNominative: 'амаль праз {{count}} год',\n      singularGenitive: 'амаль праз {{count}} гады',\n      pluralGenitive: 'амаль праз {{count}} гадоў'\n    }\n  })\n};\nvar formatDistance = function formatDistance(token, count, options) {\n  options = options || {};\n  return formatDistanceLocale[token](count, options);\n};\nexport default formatDistance;","import buildFormatLongFn from \"../../../_lib/buildFormatLongFn/index.js\";\nvar dateFormats = {\n  full: \"EEEE, d MMMM y 'г.'\",\n  long: \"d MMMM y 'г.'\",\n  medium: \"d MMM y 'г.'\",\n  short: 'dd.MM.y'\n};\nvar timeFormats = {\n  full: 'H:mm:ss zzzz',\n  long: 'H:mm:ss z',\n  medium: 'H:mm:ss',\n  short: 'H:mm'\n};\nvar dateTimeFormats = {\n  any: '{{date}}, {{time}}'\n};\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'any'\n  })\n};\nexport default formatLong;","import { toDate } from \"../../../../index.js\";\nimport isSameUTCWeek from \"../../../../_lib/isSameUTCWeek/index.js\";\nvar accusativeWeekdays = ['нядзелю', 'панядзелак', 'аўторак', 'сераду', 'чацьвер', 'пятніцу', 'суботу'];\nfunction lastWeek(day) {\n  var weekday = accusativeWeekdays[day];\n  switch (day) {\n    case 0:\n    case 3:\n    case 5:\n    case 6:\n      return \"'у мінулую \" + weekday + \" а' p\";\n    case 1:\n    case 2:\n    case 4:\n      return \"'у мінулы \" + weekday + \" а' p\";\n  }\n}\nfunction thisWeek(day) {\n  var weekday = accusativeWeekdays[day];\n  return \"'у \" + weekday + \" а' p\";\n}\nfunction nextWeek(day) {\n  var weekday = accusativeWeekdays[day];\n  switch (day) {\n    case 0:\n    case 3:\n    case 5:\n    case 6:\n      return \"'у наступную \" + weekday + \" а' p\";\n    case 1:\n    case 2:\n    case 4:\n      return \"'у наступны \" + weekday + \" а' p\";\n  }\n}\nvar lastWeekFormat = function lastWeekFormat(dirtyDate, baseDate, options) {\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  if (isSameUTCWeek(date, baseDate, options)) {\n    return thisWeek(day);\n  } else {\n    return lastWeek(day);\n  }\n};\nvar nextWeekFormat = function nextWeekFormat(dirtyDate, baseDate, options) {\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  if (isSameUTCWeek(date, baseDate, options)) {\n    return thisWeek(day);\n  } else {\n    return nextWeek(day);\n  }\n};\nvar formatRelativeLocale = {\n  lastWeek: lastWeekFormat,\n  yesterday: \"'учора а' p\",\n  today: \"'сёньня а' p\",\n  tomorrow: \"'заўтра а' p\",\n  nextWeek: nextWeekFormat,\n  other: 'P'\n};\nvar formatRelative = function formatRelative(token, date, baseDate, options) {\n  var format = formatRelativeLocale[token];\n  if (typeof format === 'function') {\n    return format(date, baseDate, options);\n  }\n  return format;\n};\nexport default formatRelative;","import buildLocalizeFn from \"../../../_lib/buildLocalizeFn/index.js\";\nvar eraValues = {\n  narrow: ['да н.э.', 'н.э.'],\n  abbreviated: ['да н. э.', 'н. э.'],\n  wide: ['да нашай эры', 'нашай эры']\n};\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['1-ы кв.', '2-і кв.', '3-і кв.', '4-ы кв.'],\n  wide: ['1-ы квартал', '2-і квартал', '3-і квартал', '4-ы квартал']\n};\nvar monthValues = {\n  narrow: ['С', 'Л', 'С', 'К', 'Т', 'Ч', 'Л', 'Ж', 'В', 'К', 'Л', 'С'],\n  abbreviated: ['студз.', 'лют.', 'сак.', 'крас.', 'трав.', 'чэрв.', 'ліп.', 'жн.', 'вер.', 'кастр.', 'ліст.', 'сьнеж.'],\n  wide: ['студзень', 'люты', 'сакавік', 'красавік', 'травень', 'чэрвень', 'ліпень', 'жнівень', 'верасень', 'кастрычнік', 'лістапад', 'сьнежань']\n};\nvar formattingMonthValues = {\n  narrow: ['С', 'Л', 'С', 'К', 'Т', 'Ч', 'Л', 'Ж', 'В', 'К', 'Л', 'С'],\n  abbreviated: ['студз.', 'лют.', 'сак.', 'крас.', 'трав.', 'чэрв.', 'ліп.', 'жн.', 'вер.', 'кастр.', 'ліст.', 'сьнеж.'],\n  wide: ['студзеня', 'лютага', 'сакавіка', 'красавіка', 'траўня', 'чэрвеня', 'ліпеня', 'жніўня', 'верасня', 'кастрычніка', 'лістапада', 'сьнежня']\n};\nvar dayValues = {\n  narrow: ['Н', 'П', 'А', 'С', 'Ч', 'П', 'С'],\n  short: ['нд', 'пн', 'аў', 'ср', 'чц', 'пт', 'сб'],\n  abbreviated: ['нядз', 'пан', 'аўт', 'сер', 'чаць', 'пят', 'суб'],\n  wide: ['нядзеля', 'панядзелак', 'аўторак', 'серада', 'чацьвер', 'пятніца', 'субота']\n};\nvar dayPeriodValues = {\n  narrow: {\n    am: 'ДП',\n    pm: 'ПП',\n    midnight: 'поўн.',\n    noon: 'поўд.',\n    morning: 'ран.',\n    afternoon: 'дзень',\n    evening: 'веч.',\n    night: 'ноч'\n  },\n  abbreviated: {\n    am: 'ДП',\n    pm: 'ПП',\n    midnight: 'поўн.',\n    noon: 'поўд.',\n    morning: 'ран.',\n    afternoon: 'дзень',\n    evening: 'веч.',\n    night: 'ноч'\n  },\n  wide: {\n    am: 'ДП',\n    pm: 'ПП',\n    midnight: 'поўнач',\n    noon: 'поўдзень',\n    morning: 'раніца',\n    afternoon: 'дзень',\n    evening: 'вечар',\n    night: 'ноч'\n  }\n};\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: 'ДП',\n    pm: 'ПП',\n    midnight: 'поўн.',\n    noon: 'поўд.',\n    morning: 'ран.',\n    afternoon: 'дня',\n    evening: 'веч.',\n    night: 'ночы'\n  },\n  abbreviated: {\n    am: 'ДП',\n    pm: 'ПП',\n    midnight: 'поўн.',\n    noon: 'поўд.',\n    morning: 'ран.',\n    afternoon: 'дня',\n    evening: 'веч.',\n    night: 'ночы'\n  },\n  wide: {\n    am: 'ДП',\n    pm: 'ПП',\n    midnight: 'поўнач',\n    noon: 'поўдзень',\n    morning: 'раніцы',\n    afternoon: 'дня',\n    evening: 'вечара',\n    night: 'ночы'\n  }\n};\nvar ordinalNumber = function ordinalNumber(dirtyNumber, options) {\n  var unit = String(options === null || options === void 0 ? void 0 : options.unit);\n  var number = Number(dirtyNumber);\n  var suffix;\n\n  /** Though it's an incorrect ordinal form of a date we use it here for consistency with other similar locales (ru, uk)\n   *  For date-month combinations should be used `d` formatter.\n   *  Correct:   `d MMMM` (4 верасня)\n   *  Incorrect: `do MMMM` (4-га верасня)\n   *\n   *  But following the consistency leads to mistakes for literal uses of `do` formatter (ordinal day of month).\n   *  So for phrase \"5th day of month\" (`do дзень месяца`)\n   *  library will produce:            `5-га дзень месяца`\n   *  but correct spelling should be:  `5-ы дзень месяца`\n   *\n   *  So I guess there should be a stand-alone and a formatting version of \"day of month\" formatters\n   */\n  if (unit === 'date') {\n    suffix = '-га';\n  } else if (unit === 'hour' || unit === 'minute' || unit === 'second') {\n    suffix = '-я';\n  } else {\n    suffix = (number % 10 === 2 || number % 10 === 3) && number % 100 !== 12 && number % 100 !== 13 ? '-і' : '-ы';\n  }\n  return number + suffix;\n};\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function argumentCallback(quarter) {\n      return quarter - 1;\n    }\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingMonthValues,\n    defaultFormattingWidth: 'wide'\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'any',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n};\nexport default localize;","import buildMatchFn from \"../../../_lib/buildMatchFn/index.js\";\nimport buildMatchPatternFn from \"../../../_lib/buildMatchPatternFn/index.js\";\nvar matchOrdinalNumberPattern = /^(\\d+)(-?(е|я|га|і|ы|ае|ая|яя|шы|гі|ці|ты|мы))?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\nvar matchEraPatterns = {\n  narrow: /^((да )?н\\.?\\s?э\\.?)/i,\n  abbreviated: /^((да )?н\\.?\\s?э\\.?)/i,\n  wide: /^(да нашай эры|нашай эры|наша эра)/i\n};\nvar parseEraPatterns = {\n  any: [/^д/i, /^н/i]\n};\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^[1234](-?[ыі]?)? кв.?/i,\n  wide: /^[1234](-?[ыі]?)? квартал/i\n};\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n};\nvar matchMonthPatterns = {\n  narrow: /^[слкмчжв]/i,\n  abbreviated: /^(студз|лют|сак|крас|тр(ав)?|чэрв|ліп|жн|вер|кастр|ліст|сьнеж)\\.?/i,\n  wide: /^(студзен[ья]|лют(ы|ага)|сакавіка?|красавіка?|тра(вень|ўня)|чэрвен[ья]|ліпен[ья]|жні(вень|ўня)|верас(ень|ня)|кастрычніка?|лістапада?|сьнеж(ань|ня))/i\n};\nvar parseMonthPatterns = {\n  narrow: [/^с/i, /^л/i, /^с/i, /^к/i, /^т/i, /^ч/i, /^л/i, /^ж/i, /^в/i, /^к/i, /^л/i, /^с/i],\n  any: [/^ст/i, /^лю/i, /^са/i, /^кр/i, /^тр/i, /^ч/i, /^ліп/i, /^ж/i, /^в/i, /^ка/i, /^ліс/i, /^сн/i]\n};\nvar matchDayPatterns = {\n  narrow: /^[нпасч]/i,\n  short: /^(нд|ня|пн|па|аў|ат|ср|се|чц|ча|пт|пя|сб|су)\\.?/i,\n  abbreviated: /^(нядз?|ндз|пнд|пан|аўт|срд|сер|чцьв|чаць|птн|пят|суб).?/i,\n  wide: /^(нядзел[яі]|панядзел(ак|ка)|аўтор(ак|ка)|серад[аы]|чацьв(ер|ярга)|пятніц[аы]|субот[аы])/i\n};\nvar parseDayPatterns = {\n  narrow: [/^н/i, /^п/i, /^а/i, /^с/i, /^ч/i, /^п/i, /^с/i],\n  any: [/^н/i, /^п[ан]/i, /^а/i, /^с[ер]/i, /^ч/i, /^п[ят]/i, /^с[уб]/i]\n};\nvar matchDayPeriodPatterns = {\n  narrow: /^([дп]п|поўн\\.?|поўд\\.?|ран\\.?|дзень|дня|веч\\.?|ночы?)/i,\n  abbreviated: /^([дп]п|поўн\\.?|поўд\\.?|ран\\.?|дзень|дня|веч\\.?|ночы?)/i,\n  wide: /^([дп]п|поўнач|поўдзень|раніц[аы]|дзень|дня|вечара?|ночы?)/i\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^дп/i,\n    pm: /^пп/i,\n    midnight: /^поўн/i,\n    noon: /^поўд/i,\n    morning: /^р/i,\n    afternoon: /^д[зн]/i,\n    evening: /^в/i,\n    night: /^н/i\n  }\n};\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function valueCallback(value) {\n      return parseInt(value, 10);\n    }\n  }),\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function valueCallback(index) {\n      return index + 1;\n    }\n  }),\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n};\nexport default match;","import formatDistance from \"./_lib/formatDistance/index.js\";\nimport formatLong from \"./_lib/formatLong/index.js\";\nimport formatRelative from \"./_lib/formatRelative/index.js\";\nimport localize from \"./_lib/localize/index.js\";\nimport match from \"./_lib/match/index.js\";\n/**\n * @type {Locale}\n * @category Locales\n * @summary Belarusian Classic locale.\n * @language Belarusian Classic\n * @iso-639-2 bel\n * @author Ryhor Nopears [@nopears]{@link https://github.com/nopears}\n */\nvar locale = {\n  code: 'be-tarask',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 1 /* Monday */,\n    firstWeekContainsDate: 1\n  }\n};\nexport default locale;"],"names":["isSameUTCWeek","dirtyDateLeft","dirtyDateRight","options","_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__","Z","arguments","dateLeftStartOfWeek","_startOfUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_1__","dateRightStartOfWeek","getTime","declension","scheme","count","undefined","one","rem10","rem100","singularNominative","replace","String","singularGenitive","pluralGenitive","buildLocalizeTokenFn","addSuffix","comparison","future","regular","past","formatDistanceLocale","lessThanXSeconds","xSeconds","halfAMinute","_","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","__webpack_exports__","token","formatLong","date","_lib_buildFormatLongFn_index_js__WEBPACK_IMPORTED_MODULE_0__","formats","full","long","medium","short","defaultWidth","time","dateTime","any","accusativeWeekdays","thisWeek","day","formatRelativeLocale","lastWeek","dirtyDate","baseDate","_index_js__WEBPACK_IMPORTED_MODULE_0__","getUTCDay","_lib_isSameUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_1__","weekday","yesterday","today","tomorrow","nextWeek","other","format","localize","ordinalNumber","dirtyNumber","unit","number","Number","era","_lib_buildLocalizeFn_index_js__WEBPACK_IMPORTED_MODULE_0__","values","narrow","abbreviated","wide","quarter","argumentCallback","month","formattingValues","defaultFormattingWidth","dayPeriod","am","pm","midnight","noon","morning","afternoon","evening","night","match","_lib_buildMatchPatternFn_index_js__WEBPACK_IMPORTED_MODULE_0__","matchPattern","parsePattern","valueCallback","value","parseInt","_lib_buildMatchFn_index_js__WEBPACK_IMPORTED_MODULE_1__","matchPatterns","defaultMatchWidth","parsePatterns","defaultParseWidth","index","locale","code","formatDistance","_lib_formatDistance_index_js__WEBPACK_IMPORTED_MODULE_0__","_lib_formatLong_index_js__WEBPACK_IMPORTED_MODULE_1__","formatRelative","_lib_formatRelative_index_js__WEBPACK_IMPORTED_MODULE_2__","_lib_localize_index_js__WEBPACK_IMPORTED_MODULE_3__","_lib_match_index_js__WEBPACK_IMPORTED_MODULE_4__","weekStartsOn","firstWeekContainsDate"],"sourceRoot":""}