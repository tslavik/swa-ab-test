{"version":3,"file":"static/chunks/31369.cf0958fff2e202ef.js","mappings":"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","sources":["webpack://_N_E/../../node_modules/date-fns/esm/_lib/isSameUTCWeek/index.js","webpack://_N_E/../../node_modules/date-fns/esm/locale/ru/_lib/formatDistance/index.js","webpack://_N_E/../../node_modules/date-fns/esm/locale/ru/_lib/formatLong/index.js","webpack://_N_E/../../node_modules/date-fns/esm/locale/ru/_lib/formatRelative/index.js","webpack://_N_E/../../node_modules/date-fns/esm/locale/ru/_lib/localize/index.js","webpack://_N_E/../../node_modules/date-fns/esm/locale/ru/_lib/match/index.js","webpack://_N_E/../../node_modules/date-fns/esm/locale/ru/index.js","webpack://_N_E/<anon>"],"sourcesContent":["import requiredArgs from \"../requiredArgs/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nexport default function isSameUTCWeek(dirtyDateLeft, dirtyDateRight, options) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfWeek = startOfUTCWeek(dirtyDateLeft, options);\n  var dateRightStartOfWeek = startOfUTCWeek(dirtyDateRight, options);\n  return dateLeftStartOfWeek.getTime() === dateRightStartOfWeek.getTime();\n}","function declension(scheme, count) {\n  // scheme for count=1 exists\n  if (scheme.one !== undefined && count === 1) {\n    return scheme.one;\n  }\n  var rem10 = count % 10;\n  var rem100 = count % 100;\n\n  // 1, 21, 31, ...\n  if (rem10 === 1 && rem100 !== 11) {\n    return scheme.singularNominative.replace('{{count}}', String(count));\n\n    // 2, 3, 4, 22, 23, 24, 32 ...\n  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {\n    return scheme.singularGenitive.replace('{{count}}', String(count));\n\n    // 5, 6, 7, 8, 9, 10, 11, ...\n  } else {\n    return scheme.pluralGenitive.replace('{{count}}', String(count));\n  }\n}\nfunction buildLocalizeTokenFn(scheme) {\n  return function (count, options) {\n    if (options !== null && options !== void 0 && options.addSuffix) {\n      if (options.comparison && options.comparison > 0) {\n        if (scheme.future) {\n          return declension(scheme.future, count);\n        } else {\n          return 'через ' + declension(scheme.regular, count);\n        }\n      } else {\n        if (scheme.past) {\n          return declension(scheme.past, count);\n        } else {\n          return declension(scheme.regular, count) + ' назад';\n        }\n      }\n    } else {\n      return declension(scheme.regular, count);\n    }\n  };\n}\nvar formatDistanceLocale = {\n  lessThanXSeconds: buildLocalizeTokenFn({\n    regular: {\n      one: 'меньше секунды',\n      singularNominative: 'меньше {{count}} секунды',\n      singularGenitive: 'меньше {{count}} секунд',\n      pluralGenitive: 'меньше {{count}} секунд'\n    },\n    future: {\n      one: 'меньше, чем через секунду',\n      singularNominative: 'меньше, чем через {{count}} секунду',\n      singularGenitive: 'меньше, чем через {{count}} секунды',\n      pluralGenitive: 'меньше, чем через {{count}} секунд'\n    }\n  }),\n  xSeconds: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: '{{count}} секунда',\n      singularGenitive: '{{count}} секунды',\n      pluralGenitive: '{{count}} секунд'\n    },\n    past: {\n      singularNominative: '{{count}} секунду назад',\n      singularGenitive: '{{count}} секунды назад',\n      pluralGenitive: '{{count}} секунд назад'\n    },\n    future: {\n      singularNominative: 'через {{count}} секунду',\n      singularGenitive: 'через {{count}} секунды',\n      pluralGenitive: 'через {{count}} секунд'\n    }\n  }),\n  halfAMinute: function halfAMinute(_count, options) {\n    if (options !== null && options !== void 0 && options.addSuffix) {\n      if (options.comparison && options.comparison > 0) {\n        return 'через полминуты';\n      } else {\n        return 'полминуты назад';\n      }\n    }\n    return 'полминуты';\n  },\n  lessThanXMinutes: buildLocalizeTokenFn({\n    regular: {\n      one: 'меньше минуты',\n      singularNominative: 'меньше {{count}} минуты',\n      singularGenitive: 'меньше {{count}} минут',\n      pluralGenitive: 'меньше {{count}} минут'\n    },\n    future: {\n      one: 'меньше, чем через минуту',\n      singularNominative: 'меньше, чем через {{count}} минуту',\n      singularGenitive: 'меньше, чем через {{count}} минуты',\n      pluralGenitive: 'меньше, чем через {{count}} минут'\n    }\n  }),\n  xMinutes: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: '{{count}} минута',\n      singularGenitive: '{{count}} минуты',\n      pluralGenitive: '{{count}} минут'\n    },\n    past: {\n      singularNominative: '{{count}} минуту назад',\n      singularGenitive: '{{count}} минуты назад',\n      pluralGenitive: '{{count}} минут назад'\n    },\n    future: {\n      singularNominative: 'через {{count}} минуту',\n      singularGenitive: 'через {{count}} минуты',\n      pluralGenitive: 'через {{count}} минут'\n    }\n  }),\n  aboutXHours: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: 'около {{count}} часа',\n      singularGenitive: 'около {{count}} часов',\n      pluralGenitive: 'около {{count}} часов'\n    },\n    future: {\n      singularNominative: 'приблизительно через {{count}} час',\n      singularGenitive: 'приблизительно через {{count}} часа',\n      pluralGenitive: 'приблизительно через {{count}} часов'\n    }\n  }),\n  xHours: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: '{{count}} час',\n      singularGenitive: '{{count}} часа',\n      pluralGenitive: '{{count}} часов'\n    }\n  }),\n  xDays: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: '{{count}} день',\n      singularGenitive: '{{count}} дня',\n      pluralGenitive: '{{count}} дней'\n    }\n  }),\n  aboutXWeeks: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: 'около {{count}} недели',\n      singularGenitive: 'около {{count}} недель',\n      pluralGenitive: 'около {{count}} недель'\n    },\n    future: {\n      singularNominative: 'приблизительно через {{count}} неделю',\n      singularGenitive: 'приблизительно через {{count}} недели',\n      pluralGenitive: 'приблизительно через {{count}} недель'\n    }\n  }),\n  xWeeks: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: '{{count}} неделя',\n      singularGenitive: '{{count}} недели',\n      pluralGenitive: '{{count}} недель'\n    }\n  }),\n  aboutXMonths: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: 'около {{count}} месяца',\n      singularGenitive: 'около {{count}} месяцев',\n      pluralGenitive: 'около {{count}} месяцев'\n    },\n    future: {\n      singularNominative: 'приблизительно через {{count}} месяц',\n      singularGenitive: 'приблизительно через {{count}} месяца',\n      pluralGenitive: 'приблизительно через {{count}} месяцев'\n    }\n  }),\n  xMonths: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: '{{count}} месяц',\n      singularGenitive: '{{count}} месяца',\n      pluralGenitive: '{{count}} месяцев'\n    }\n  }),\n  aboutXYears: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: 'около {{count}} года',\n      singularGenitive: 'около {{count}} лет',\n      pluralGenitive: 'около {{count}} лет'\n    },\n    future: {\n      singularNominative: 'приблизительно через {{count}} год',\n      singularGenitive: 'приблизительно через {{count}} года',\n      pluralGenitive: 'приблизительно через {{count}} лет'\n    }\n  }),\n  xYears: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: '{{count}} год',\n      singularGenitive: '{{count}} года',\n      pluralGenitive: '{{count}} лет'\n    }\n  }),\n  overXYears: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: 'больше {{count}} года',\n      singularGenitive: 'больше {{count}} лет',\n      pluralGenitive: 'больше {{count}} лет'\n    },\n    future: {\n      singularNominative: 'больше, чем через {{count}} год',\n      singularGenitive: 'больше, чем через {{count}} года',\n      pluralGenitive: 'больше, чем через {{count}} лет'\n    }\n  }),\n  almostXYears: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: 'почти {{count}} год',\n      singularGenitive: 'почти {{count}} года',\n      pluralGenitive: 'почти {{count}} лет'\n    },\n    future: {\n      singularNominative: 'почти через {{count}} год',\n      singularGenitive: 'почти через {{count}} года',\n      pluralGenitive: 'почти через {{count}} лет'\n    }\n  })\n};\nvar formatDistance = function formatDistance(token, count, options) {\n  return formatDistanceLocale[token](count, options);\n};\nexport default formatDistance;","import buildFormatLongFn from \"../../../_lib/buildFormatLongFn/index.js\";\nvar dateFormats = {\n  full: \"EEEE, d MMMM y 'г.'\",\n  long: \"d MMMM y 'г.'\",\n  medium: \"d MMM y 'г.'\",\n  short: 'dd.MM.y'\n};\nvar timeFormats = {\n  full: 'H:mm:ss zzzz',\n  long: 'H:mm:ss z',\n  medium: 'H:mm:ss',\n  short: 'H:mm'\n};\nvar dateTimeFormats = {\n  any: '{{date}}, {{time}}'\n};\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'any'\n  })\n};\nexport default formatLong;","import isSameUTCWeek from \"../../../../_lib/isSameUTCWeek/index.js\";\nvar accusativeWeekdays = ['воскресенье', 'понедельник', 'вторник', 'среду', 'четверг', 'пятницу', 'субботу'];\nfunction _lastWeek(day) {\n  var weekday = accusativeWeekdays[day];\n  switch (day) {\n    case 0:\n      return \"'в прошлое \" + weekday + \" в' p\";\n    case 1:\n    case 2:\n    case 4:\n      return \"'в прошлый \" + weekday + \" в' p\";\n    case 3:\n    case 5:\n    case 6:\n      return \"'в прошлую \" + weekday + \" в' p\";\n  }\n}\nfunction thisWeek(day) {\n  var weekday = accusativeWeekdays[day];\n  if (day === 2 /* Tue */) {\n    return \"'во \" + weekday + \" в' p\";\n  } else {\n    return \"'в \" + weekday + \" в' p\";\n  }\n}\nfunction _nextWeek(day) {\n  var weekday = accusativeWeekdays[day];\n  switch (day) {\n    case 0:\n      return \"'в следующее \" + weekday + \" в' p\";\n    case 1:\n    case 2:\n    case 4:\n      return \"'в следующий \" + weekday + \" в' p\";\n    case 3:\n    case 5:\n    case 6:\n      return \"'в следующую \" + weekday + \" в' p\";\n  }\n}\nvar formatRelativeLocale = {\n  lastWeek: function lastWeek(date, baseDate, options) {\n    var day = date.getUTCDay();\n    if (isSameUTCWeek(date, baseDate, options)) {\n      return thisWeek(day);\n    } else {\n      return _lastWeek(day);\n    }\n  },\n  yesterday: \"'вчера в' p\",\n  today: \"'сегодня в' p\",\n  tomorrow: \"'завтра в' p\",\n  nextWeek: function nextWeek(date, baseDate, options) {\n    var day = date.getUTCDay();\n    if (isSameUTCWeek(date, baseDate, options)) {\n      return thisWeek(day);\n    } else {\n      return _nextWeek(day);\n    }\n  },\n  other: 'P'\n};\nvar formatRelative = function formatRelative(token, date, baseDate, options) {\n  var format = formatRelativeLocale[token];\n  if (typeof format === 'function') {\n    return format(date, baseDate, options);\n  }\n  return format;\n};\nexport default formatRelative;","import buildLocalizeFn from \"../../../_lib/buildLocalizeFn/index.js\";\nvar eraValues = {\n  narrow: ['до н.э.', 'н.э.'],\n  abbreviated: ['до н. э.', 'н. э.'],\n  wide: ['до нашей эры', 'нашей эры']\n};\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['1-й кв.', '2-й кв.', '3-й кв.', '4-й кв.'],\n  wide: ['1-й квартал', '2-й квартал', '3-й квартал', '4-й квартал']\n};\nvar monthValues = {\n  narrow: ['Я', 'Ф', 'М', 'А', 'М', 'И', 'И', 'А', 'С', 'О', 'Н', 'Д'],\n  abbreviated: ['янв.', 'фев.', 'март', 'апр.', 'май', 'июнь', 'июль', 'авг.', 'сент.', 'окт.', 'нояб.', 'дек.'],\n  wide: ['январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь', 'ноябрь', 'декабрь']\n};\nvar formattingMonthValues = {\n  narrow: ['Я', 'Ф', 'М', 'А', 'М', 'И', 'И', 'А', 'С', 'О', 'Н', 'Д'],\n  abbreviated: ['янв.', 'фев.', 'мар.', 'апр.', 'мая', 'июн.', 'июл.', 'авг.', 'сент.', 'окт.', 'нояб.', 'дек.'],\n  wide: ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря']\n};\nvar dayValues = {\n  narrow: ['В', 'П', 'В', 'С', 'Ч', 'П', 'С'],\n  short: ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'],\n  abbreviated: ['вск', 'пнд', 'втр', 'срд', 'чтв', 'птн', 'суб'],\n  wide: ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота']\n};\nvar dayPeriodValues = {\n  narrow: {\n    am: 'ДП',\n    pm: 'ПП',\n    midnight: 'полн.',\n    noon: 'полд.',\n    morning: 'утро',\n    afternoon: 'день',\n    evening: 'веч.',\n    night: 'ночь'\n  },\n  abbreviated: {\n    am: 'ДП',\n    pm: 'ПП',\n    midnight: 'полн.',\n    noon: 'полд.',\n    morning: 'утро',\n    afternoon: 'день',\n    evening: 'веч.',\n    night: 'ночь'\n  },\n  wide: {\n    am: 'ДП',\n    pm: 'ПП',\n    midnight: 'полночь',\n    noon: 'полдень',\n    morning: 'утро',\n    afternoon: 'день',\n    evening: 'вечер',\n    night: 'ночь'\n  }\n};\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: 'ДП',\n    pm: 'ПП',\n    midnight: 'полн.',\n    noon: 'полд.',\n    morning: 'утра',\n    afternoon: 'дня',\n    evening: 'веч.',\n    night: 'ночи'\n  },\n  abbreviated: {\n    am: 'ДП',\n    pm: 'ПП',\n    midnight: 'полн.',\n    noon: 'полд.',\n    morning: 'утра',\n    afternoon: 'дня',\n    evening: 'веч.',\n    night: 'ночи'\n  },\n  wide: {\n    am: 'ДП',\n    pm: 'ПП',\n    midnight: 'полночь',\n    noon: 'полдень',\n    morning: 'утра',\n    afternoon: 'дня',\n    evening: 'вечера',\n    night: 'ночи'\n  }\n};\nvar ordinalNumber = function ordinalNumber(dirtyNumber, options) {\n  var number = Number(dirtyNumber);\n  var unit = options === null || options === void 0 ? void 0 : options.unit;\n  var suffix;\n  if (unit === 'date') {\n    suffix = '-е';\n  } else if (unit === 'week' || unit === 'minute' || unit === 'second') {\n    suffix = '-я';\n  } else {\n    suffix = '-й';\n  }\n  return number + suffix;\n};\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function argumentCallback(quarter) {\n      return quarter - 1;\n    }\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingMonthValues,\n    defaultFormattingWidth: 'wide'\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'any',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n};\nexport default localize;","import buildMatchFn from \"../../../_lib/buildMatchFn/index.js\";\nimport buildMatchPatternFn from \"../../../_lib/buildMatchPatternFn/index.js\";\nvar matchOrdinalNumberPattern = /^(\\d+)(-?(е|я|й|ое|ье|ая|ья|ый|ой|ий|ый))?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\nvar matchEraPatterns = {\n  narrow: /^((до )?н\\.?\\s?э\\.?)/i,\n  abbreviated: /^((до )?н\\.?\\s?э\\.?)/i,\n  wide: /^(до нашей эры|нашей эры|наша эра)/i\n};\nvar parseEraPatterns = {\n  any: [/^д/i, /^н/i]\n};\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^[1234](-?[ыои]?й?)? кв.?/i,\n  wide: /^[1234](-?[ыои]?й?)? квартал/i\n};\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n};\nvar matchMonthPatterns = {\n  narrow: /^[яфмаисонд]/i,\n  abbreviated: /^(янв|фев|март?|апр|ма[йя]|июн[ья]?|июл[ья]?|авг|сент?|окт|нояб?|дек)\\.?/i,\n  wide: /^(январ[ья]|феврал[ья]|марта?|апрел[ья]|ма[йя]|июн[ья]|июл[ья]|августа?|сентябр[ья]|октябр[ья]|октябр[ья]|ноябр[ья]|декабр[ья])/i\n};\nvar parseMonthPatterns = {\n  narrow: [/^я/i, /^ф/i, /^м/i, /^а/i, /^м/i, /^и/i, /^и/i, /^а/i, /^с/i, /^о/i, /^н/i, /^я/i],\n  any: [/^я/i, /^ф/i, /^мар/i, /^ап/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^ав/i, /^с/i, /^о/i, /^н/i, /^д/i]\n};\nvar matchDayPatterns = {\n  narrow: /^[впсч]/i,\n  short: /^(вс|во|пн|по|вт|ср|чт|че|пт|пя|сб|су)\\.?/i,\n  abbreviated: /^(вск|вос|пнд|пон|втр|вто|срд|сре|чтв|чет|птн|пят|суб).?/i,\n  wide: /^(воскресень[ея]|понедельника?|вторника?|сред[аы]|четверга?|пятниц[аы]|суббот[аы])/i\n};\nvar parseDayPatterns = {\n  narrow: [/^в/i, /^п/i, /^в/i, /^с/i, /^ч/i, /^п/i, /^с/i],\n  any: [/^в[ос]/i, /^п[он]/i, /^в/i, /^ср/i, /^ч/i, /^п[ят]/i, /^с[уб]/i]\n};\nvar matchDayPeriodPatterns = {\n  narrow: /^([дп]п|полн\\.?|полд\\.?|утр[оа]|день|дня|веч\\.?|ноч[ьи])/i,\n  abbreviated: /^([дп]п|полн\\.?|полд\\.?|утр[оа]|день|дня|веч\\.?|ноч[ьи])/i,\n  wide: /^([дп]п|полночь|полдень|утр[оа]|день|дня|вечера?|ноч[ьи])/i\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^дп/i,\n    pm: /^пп/i,\n    midnight: /^полн/i,\n    noon: /^полд/i,\n    morning: /^у/i,\n    afternoon: /^д[ен]/i,\n    evening: /^в/i,\n    night: /^н/i\n  }\n};\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function valueCallback(value) {\n      return parseInt(value, 10);\n    }\n  }),\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function valueCallback(index) {\n      return index + 1;\n    }\n  }),\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n};\nexport default match;","import formatDistance from \"./_lib/formatDistance/index.js\";\nimport formatLong from \"./_lib/formatLong/index.js\";\nimport formatRelative from \"./_lib/formatRelative/index.js\";\nimport localize from \"./_lib/localize/index.js\";\nimport match from \"./_lib/match/index.js\";\n/**\n * @type {Locale}\n * @category Locales\n * @summary Russian locale.\n * @language Russian\n * @iso-639-2 rus\n * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\n * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\n */\nvar locale = {\n  code: 'ru',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 1 /* Monday */,\n    firstWeekContainsDate: 1\n  }\n};\nexport default locale;"],"names":["isSameUTCWeek","dirtyDateLeft","dirtyDateRight","options","_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__","Z","arguments","dateLeftStartOfWeek","_startOfUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_1__","dateRightStartOfWeek","getTime","declension","scheme","count","undefined","one","rem10","rem100","singularNominative","replace","String","singularGenitive","pluralGenitive","buildLocalizeTokenFn","addSuffix","comparison","future","regular","past","formatDistanceLocale","lessThanXSeconds","xSeconds","halfAMinute","_count","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","__webpack_exports__","token","formatLong","date","_lib_buildFormatLongFn_index_js__WEBPACK_IMPORTED_MODULE_0__","formats","full","long","medium","short","defaultWidth","time","dateTime","any","accusativeWeekdays","thisWeek","day","weekday","formatRelativeLocale","lastWeek","baseDate","getUTCDay","_lib_isSameUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_0__","_lastWeek","yesterday","today","tomorrow","nextWeek","_nextWeek","other","format","localize","ordinalNumber","dirtyNumber","number","Number","unit","era","_lib_buildLocalizeFn_index_js__WEBPACK_IMPORTED_MODULE_0__","values","narrow","abbreviated","wide","quarter","argumentCallback","month","formattingValues","defaultFormattingWidth","dayPeriod","am","pm","midnight","noon","morning","afternoon","evening","night","match","_lib_buildMatchPatternFn_index_js__WEBPACK_IMPORTED_MODULE_0__","matchPattern","parsePattern","valueCallback","value","parseInt","_lib_buildMatchFn_index_js__WEBPACK_IMPORTED_MODULE_1__","matchPatterns","defaultMatchWidth","parsePatterns","defaultParseWidth","index","locale","code","formatDistance","_lib_formatDistance_index_js__WEBPACK_IMPORTED_MODULE_0__","_lib_formatLong_index_js__WEBPACK_IMPORTED_MODULE_1__","formatRelative","_lib_formatRelative_index_js__WEBPACK_IMPORTED_MODULE_2__","_lib_localize_index_js__WEBPACK_IMPORTED_MODULE_3__","_lib_match_index_js__WEBPACK_IMPORTED_MODULE_4__","weekStartsOn","firstWeekContainsDate"],"sourceRoot":""}